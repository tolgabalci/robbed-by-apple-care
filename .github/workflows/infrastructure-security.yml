name: Infrastructure Security Scanning

on:
  push:
    paths: [ 'infra/**' ]
  pull_request:
    paths: [ 'infra/**' ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  terraform-security:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create reports directory
      run: mkdir -p reports
    
    - name: Run Checkov
      run: |
        # Remove any existing directory with the same name
        rm -rf ./reports/checkov-results.sarif
        
        docker run --rm -v $(pwd):/tf --workdir /tf \
          bridgecrew/checkov:latest \
          --framework terraform \
          --directory ./infra/terraform \
          --output sarif \
          --output-file-path ./reports/checkov-results.sarif \
          --download-external-modules true || true
        
        # Ensure the file exists and is a file, not a directory
        if [ ! -f "./reports/checkov-results.sarif" ] || [ -d "./reports/checkov-results.sarif" ]; then
          rm -rf ./reports/checkov-results.sarif
          echo '{"version":"2.1.0","$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[{"tool":{"driver":{"name":"Checkov","version":"unknown"}},"results":[]}]}' > ./reports/checkov-results.sarif
        fi
    
    - name: Upload Checkov results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: reports/checkov-results.sarif
    
    - name: Run TFSec
      run: |
        mkdir -p reports
        docker run --rm -v $(pwd):/src --workdir /src \
          aquasec/tfsec:latest \
          --format sarif \
          --out reports/tfsec-results.sarif \
          --soft-fail \
          ./infra/terraform || true
        
        # Ensure the file exists even if TFSec fails
        if [ ! -f "./reports/tfsec-results.sarif" ]; then
          echo '{"version":"2.1.0","$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[{"tool":{"driver":{"name":"TFSec","version":"unknown"}},"results":[]}]}' > ./reports/tfsec-results.sarif
        fi
    
    - name: Upload TFSec results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: reports/tfsec-results.sarif
    
    - name: Run Trivy IaC scan
      run: |
        mkdir -p reports
        docker run --rm -v $(pwd):/src --workdir /src \
          aquasec/trivy:latest config \
          --format sarif \
          --output reports/trivy-iac-results.sarif \
          ./infra/terraform || true
        
        # Ensure the file exists even if Trivy fails
        if [ ! -f "./reports/trivy-iac-results.sarif" ]; then
          echo '{"version":"2.1.0","$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[{"tool":{"driver":{"name":"Trivy","version":"unknown"}},"results":[]}]}' > ./reports/trivy-iac-results.sarif
        fi
    
    - name: Upload Trivy IaC results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: reports/trivy-iac-results.sarif

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy Docker scan
      run: |
        mkdir -p reports
        docker run --rm -v $(pwd):/src --workdir /src \
          aquasec/trivy:latest fs \
          --format sarif \
          --output reports/trivy-docker-results.sarif \
          ./apps/forum-provisioning || true
        
        # Ensure the file exists even if Trivy fails
        if [ ! -f "./reports/trivy-docker-results.sarif" ]; then
          echo '{"version":"2.1.0","$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[{"tool":{"driver":{"name":"Trivy","version":"unknown"}},"results":[]}]}' > ./reports/trivy-docker-results.sarif
        fi
    
    - name: Upload Trivy Docker results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: reports/trivy-docker-results.sarif
    
    - name: Scan Discourse Docker configuration
      run: |
        echo "## Docker Security Scan Results" >> $GITHUB_STEP_SUMMARY
        
        # Check for hardcoded secrets in app.yml
        if grep -r "password\|secret\|key" apps/forum-provisioning/app.yml | grep -v "ENV\|DISCOURSE"; then
          echo "⚠️ Potential hardcoded secrets found in app.yml" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ No hardcoded secrets detected in Docker configuration" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for proper secret management
        if grep -q "DISCOURSE_.*=" apps/forum-provisioning/app.yml; then
          echo "✅ Environment variables properly configured" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Environment variables may not be properly configured" >> $GITHUB_STEP_SUMMARY
        fi

  compliance-check:
    name: Compliance and Best Practices
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check Azure Security Baseline
      run: |
        echo "## Azure Security Baseline Compliance" >> $GITHUB_STEP_SUMMARY
        
        # Check for required security configurations
        ISSUES=0
        
        # Check for NSG rules
        if grep -r "azurerm_network_security_group" infra/terraform/; then
          echo "✅ Network Security Groups configured" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Network Security Groups not found" >> $GITHUB_STEP_SUMMARY
          ISSUES=$((ISSUES + 1))
        fi
        
        # Check for Key Vault
        if grep -r "azurerm_key_vault" infra/terraform/; then
          echo "✅ Key Vault configured for secret management" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Key Vault not configured" >> $GITHUB_STEP_SUMMARY
          ISSUES=$((ISSUES + 1))
        fi
        
        # Check for managed identity
        if grep -r "azurerm_user_assigned_identity\|identity.*SystemAssigned" infra/terraform/; then
          echo "✅ Managed Identity configured" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Managed Identity not found" >> $GITHUB_STEP_SUMMARY
          ISSUES=$((ISSUES + 1))
        fi
        
        # Check for encryption at rest
        if grep -r "encryption\|storage_encrypted" infra/terraform/; then
          echo "✅ Encryption configurations found" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Encryption at rest may not be configured" >> $GITHUB_STEP_SUMMARY
          ISSUES=$((ISSUES + 1))
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Total Issues Found:** $ISSUES" >> $GITHUB_STEP_SUMMARY
        
        if [ $ISSUES -gt 2 ]; then
          echo "❌ Too many compliance issues found" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ Compliance check passed" >> $GITHUB_STEP_SUMMARY
        fi