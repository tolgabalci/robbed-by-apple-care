name: Infrastructure Deployment

on:
  push:
    branches: [ main ]
    paths: [ 'infra/terraform/**' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
    paths: [ 'infra/terraform/**' ]

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write
  issues: write

env:
  TF_VERSION: "1.6.0"
  WORKING_DIR: "infra/terraform"

jobs:

  # Terraform plan for pull requests
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
    
    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=terraform.tfstate"
    
    - name: Terraform Validate
      run: terraform validate
    
    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -detailed-exitcode -no-color -out=tfplan
        echo "exitcode=$?" >> $GITHUB_OUTPUT
      continue-on-error: true
    
    - name: Generate Plan Summary
      run: |
        terraform show -no-color tfplan > plan_output.txt
        echo "## Terraform Plan Summary" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        head -50 plan_output.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
    
    - name: Comment PR with Plan
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('${{ env.WORKING_DIR }}/plan_output.txt', 'utf8');
          const maxLength = 65000; // GitHub comment limit
          const truncatedPlan = plan.length > maxLength ? 
            plan.substring(0, maxLength) + '\n\n... (truncated)' : plan;
          
          const output = `## Terraform Plan Results
          
          **Plan Exit Code:** ${{ steps.plan.outputs.exitcode }}
          
          <details>
          <summary>Show Plan</summary>
          
          \`\`\`terraform
          ${truncatedPlan}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });
    
    - name: Plan Status Check
      if: steps.plan.outputs.exitcode == 1
      run: exit 1

  # Terraform apply for releases (tags)
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=terraform.tfstate"
    
    - name: Terraform Plan
      run: terraform plan -out=tfplan
    
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
    
    - name: Generate Deployment Summary
      run: |
        echo "## Infrastructure Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "**Tag:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Outputs:" >> $GITHUB_STEP_SUMMARY
        terraform output -json | jq -r 'to_entries[] | "- **\(.key):** \(.value.value)"' >> $GITHUB_STEP_SUMMARY

  # Terraform drift detection for main branch pushes
  terraform-drift:
    name: Drift Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=terraform.tfstate"
    
    - name: Check for Drift
      run: |
        terraform plan -detailed-exitcode -no-color
        if [ $? -eq 2 ]; then
          echo "⚠️ Infrastructure drift detected!" >> $GITHUB_STEP_SUMMARY
          echo "Resources have changed outside of Terraform." >> $GITHUB_STEP_SUMMARY
          echo "Consider creating a release to apply changes." >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ No infrastructure drift detected." >> $GITHUB_STEP_SUMMARY
        fi